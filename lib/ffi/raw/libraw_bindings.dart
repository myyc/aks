// AUTO-GENERATED FILE. DO NOT MODIFY.

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for LibRaw C API
class LibRawBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibRawBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibRawBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  ffi.Pointer<ffi.Void> raw_processor_init() {
    return _raw_processor_init();
  }

  late final _raw_processor_initPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
        'raw_processor_init',
      );
  late final _raw_processor_init = _raw_processor_initPtr
      .asFunction<ffi.Pointer<ffi.Void> Function()>();

  int raw_processor_open(
    ffi.Pointer<ffi.Void> processor,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _raw_processor_open(processor, filename);
  }

  late final _raw_processor_openPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)
        >
      >('raw_processor_open');
  late final _raw_processor_open = _raw_processor_openPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  int raw_processor_process(ffi.Pointer<ffi.Void> processor) {
    return _raw_processor_process(processor);
  }

  late final _raw_processor_processPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
        'raw_processor_process',
      );
  late final _raw_processor_process = _raw_processor_processPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<RawImageData> raw_processor_get_rgb(
    ffi.Pointer<ffi.Void> processor,
  ) {
    return _raw_processor_get_rgb(processor);
  }

  late final _raw_processor_get_rgbPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RawImageData> Function(ffi.Pointer<ffi.Void>)
        >
      >('raw_processor_get_rgb');
  late final _raw_processor_get_rgb = _raw_processor_get_rgbPtr
      .asFunction<ffi.Pointer<RawImageData> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ExifData> raw_processor_get_exif(
    ffi.Pointer<ffi.Void> processor,
  ) {
    return _raw_processor_get_exif(processor);
  }

  late final _raw_processor_get_exifPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ExifData> Function(ffi.Pointer<ffi.Void>)
        >
      >('raw_processor_get_exif');
  late final _raw_processor_get_exif = _raw_processor_get_exifPtr
      .asFunction<ffi.Pointer<ExifData> Function(ffi.Pointer<ffi.Void>)>();

  void raw_processor_free_image(ffi.Pointer<RawImageData> image) {
    return _raw_processor_free_image(image);
  }

  late final _raw_processor_free_imagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RawImageData>)>>(
        'raw_processor_free_image',
      );
  late final _raw_processor_free_image = _raw_processor_free_imagePtr
      .asFunction<void Function(ffi.Pointer<RawImageData>)>();

  void raw_processor_free_exif(ffi.Pointer<ExifData> exif) {
    return _raw_processor_free_exif(exif);
  }

  late final _raw_processor_free_exifPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ExifData>)>>(
        'raw_processor_free_exif',
      );
  late final _raw_processor_free_exif = _raw_processor_free_exifPtr
      .asFunction<void Function(ffi.Pointer<ExifData>)>();

  void raw_processor_cleanup(ffi.Pointer<ffi.Void> processor) {
    return _raw_processor_cleanup(processor);
  }

  late final _raw_processor_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
        'raw_processor_cleanup',
      );
  late final _raw_processor_cleanup = _raw_processor_cleanupPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> raw_processor_get_error() {
    return _raw_processor_get_error();
  }

  late final _raw_processor_get_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
        'raw_processor_get_error',
      );
  late final _raw_processor_get_error = _raw_processor_get_errorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class RawImageInfo extends ffi.Struct {
  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Uint16()
  external int bits;

  @ffi.Uint16()
  external int colors;
}

final class RawImageData extends ffi.Struct {
  external RawImageInfo info;

  external ffi.Pointer<ffi.Uint8> data;

  @ffi.Size()
  external int size;
}

final class ExifData extends ffi.Struct {
  external ffi.Pointer<ffi.Char> make;

  external ffi.Pointer<ffi.Char> model;

  external ffi.Pointer<ffi.Char> lens_make;

  external ffi.Pointer<ffi.Char> lens_model;

  external ffi.Pointer<ffi.Char> software;

  @ffi.Int()
  external int iso_speed;

  @ffi.Double()
  external double aperture;

  @ffi.Double()
  external double shutter_speed;

  @ffi.Double()
  external double focal_length;

  @ffi.Double()
  external double focal_length_35mm;

  external ffi.Pointer<ffi.Char> datetime;

  @ffi.Int()
  external int exposure_program;

  @ffi.Int()
  external int exposure_mode;

  @ffi.Int()
  external int metering_mode;

  @ffi.Double()
  external double exposure_compensation;

  @ffi.Int()
  external int flash_mode;

  @ffi.Int()
  external int white_balance;
}

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2Y = 1;

const int __GLIBC_USE_ISOC23 = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_TIME_BITS64 = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C23_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 42;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C23 = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int _BITS_STDINT_LEAST_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;
